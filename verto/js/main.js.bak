(function() {
  var vertoHandle, vertoCallbacks;

  $.verto.init({}, bootstrap);

  function bootstrap(status) {
    vertoHandle = new jQuery.verto({
      login: '1464',
      passwd: 'tangbull@2018',
      socketUrl: 'ws://fs.myi-cloud.com:8081',
      ringFile: 'sounds/bell_ring2.wav',
      tag: "video-container",
      deviceParams: {
        useMic: true,
        useSpeak: true,
	      useMic: 'any',
	      useSpeak: 'any',
      },
      iceServers: true
    }, vertoCallbacks);

    document.getElementById("make-call").addEventListener("click", makeCall);
    document.getElementById("hang-up-call").addEventListener("click", hangupCall);
  	document.getElementById("answer-call").addEventListener("click", answerCall);
  };

  function makeCall() {
  	 vertoHandle.videoParams({
	    // Dimensions of the video feed to send.
	    minWidth: 320,
	    minHeight: 240,
	    maxWidth: 640,
	    maxHeight: 480,
	    // The minimum frame rate of the client camera, Verto will fail if it's
	    // less than this.
	    minFrameRate: 15,
	    // The maximum frame rate to send from the camera.
	    vertoBestFrameRate: 30,
	  });
  	
	  currentCall = vertoHandle.newCall({
	    destination_number: '0081283983959',
	    caller_id_name: 'Test Guy',
	    caller_id_number: '1464',
	    outgoingBandwidth: 'default',
	    incomingBandwidth: 'default',
	    useStereo: true,
	    mirrorInput: true,
	    userVariables: {
	    	avatar: "",
	      email: 'test@test.com',
	    },
	    dedEnc: false,
	  });
	};
	
	function onDialogState(d) {
	  switch (d.state.name) {
	    case "trying":
	      break;
	    case "answering":
	      break;
	    case "active":
	      break;
	    case "hangup":
	      console.log("Call ended with cause: " + d.cause);
	      break;
	    case "destroy":
	      // Some kind of client side cleanup...
	      break;
	  }
	};

	
  function hangupCall() {
    currentCall.hangup();
  };
  
  function answerCall() {
	  currentCall.answer();
	};

  vertoCallbacks = {
    onWSLogin: onWSLogin,
    onWSClose: onWSClose,
    onDialogState: onDialogState,
  };
  
  function onDialogState(dialog) {
	  console.debug('onDialogState', dialog);
	
	  if(!currentCall) {
	    currentCall = dialog;
	  }
	
	  if(dialog.state.name == 'ringing') {
	    alert('Someone is calling you, answer!');
	  }
	};

  function onWSLogin(verto, success) {
    console.log('onWSLogin', success);
  };

  function onWSClose(verto, success) {
    console.log('onWSClose', success);
  };
})();